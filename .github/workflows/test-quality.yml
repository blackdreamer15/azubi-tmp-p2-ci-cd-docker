name: Code Quality and Testing

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  # Job 1: Frontend Code Quality
  frontend-quality:
    name: Frontend Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: front-end/package-lock.json

      - name: Install Frontend dependencies
        working-directory: ./front-end
        run: npm ci

      - name: Run Frontend lint check
        working-directory: ./front-end
        run: npm run lint || echo "⚠️ Linting issues found - continuing anyway"

      - name: Build Frontend application
        working-directory: ./front-end
        run: npm run build
        env:
          SECRET_COOKIE_PASSWORD: ${{ secrets.SECRET_COOKIE_PASSWORD }}

  # Job 2: Backend Code Quality
  backend-quality:
    name: Backend Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.3"
          extensions: pdo, pdo_mysql, redis, gd, zip, exif
          coverage: none

      - name: Validate Composer files
        working-directory: ./back-end
        run: composer validate --strict

      - name: Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: back-end/vendor
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-php-

      - name: Install Backend dependencies
        working-directory: ./back-end
        run: composer install --prefer-dist --no-progress --no-dev --optimize-autoloader

      - name: Check Laravel configuration
        working-directory: ./back-end
        run: |
          cp .env.example .env || echo "No .env.example found"
          php artisan config:clear || echo "Config clear failed"

  # Job 3: Docker Compose Validation
  docker-validation:
    name: Docker Compose Validation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate Docker Compose file
        run: docker compose config

      - name: Check Dockerfile syntax
        run: |
          echo "✅ Checking Frontend Dockerfile..."
          docker build --no-cache -f front-end/Dockerfile front-end --dry-run 2>/dev/null || docker build -t test-frontend -f front-end/Dockerfile front-end

          echo "✅ Checking Backend Dockerfile..."
          docker build --no-cache -f back-end/dockerfiles/php.dockerfile back-end --dry-run 2>/dev/null || docker build -t test-backend -f back-end/dockerfiles/php.dockerfile back-end

          echo "✅ Checking Nginx Dockerfile..."
          docker build --no-cache -f back-end/dockerfiles/nginx.dockerfile back-end --dry-run 2>/dev/null || docker build -t test-nginx -f back-end/dockerfiles/nginx.dockerfile back-end

  # Job 4: Security Scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: "trivy-results.sarif"
